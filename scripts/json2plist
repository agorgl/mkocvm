#!/usr/bin/env python
import sys
import json
import xml.etree.ElementTree as ET
from collections import defaultdict

def dict_to_etree(d, root):
    if isinstance(d, dict):
        e = ET.SubElement(root, 'dict')
        for k,v in d.items():
            ET.SubElement(e, 'key').text = k
            dict_to_etree(v, e)
    elif isinstance(d, list):
        e = ET.SubElement(root, 'array')
        for c in d:
            dict_to_etree(c, e)
    elif isinstance(d, bool):
        ET.SubElement(root, str(d).lower())
    elif isinstance(d, int):
        ET.SubElement(root, 'integer').text = str(d)
    elif isinstance(d, str):
        if d.startswith('<') and d.endswith('>'):
            ET.SubElement(root, 'data').text = d[1:-1]
        else:
            ET.SubElement(root, 'string').text = d
    else:
        ET.SubElement(root, 'string')

def json_to_plist(source):
    close_source = False
    if not hasattr(source, "read"):
        source = open(source, "rb")
        close_source = True
    data = json.load(source)
    if close_source:
        source.close()

    root = ET.Element('plist', attrib={'version': '1.0'})
    dict_to_etree(data, root)
    ET.indent(root)

    xml = ET.tostring(root, encoding="unicode")
    xmldecl = '<?xml version="1.0" encoding="UTF-8"?>'
    doctype = '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">'
    return f"{xmldecl}\n{doctype}\n{xml}"

if __name__ == '__main__':
    r = json_to_plist(sys.argv[1] if len(sys.argv) > 1 else sys.stdin)
    print(r)
